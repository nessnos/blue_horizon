import { createEventHook, toRef, whenever } from "@vueuse/shared";
import { ref } from "vue-demi";
import { useAssertV2SiteKey, useRecaptchaProxy } from "./context.mjs";
export var RecaptchaV2State = /* @__PURE__ */ ((RecaptchaV2State2) => {
  RecaptchaV2State2["Init"] = "init";
  RecaptchaV2State2["Verified"] = "verified";
  RecaptchaV2State2["Expired"] = "expired";
  RecaptchaV2State2["Error"] = "error";
  return RecaptchaV2State2;
})(RecaptchaV2State || {});
export function useChallengeV2({ root = ref(), options = {} }) {
  const siteKey = useAssertV2SiteKey();
  const widgetID = ref();
  const proxy = useRecaptchaProxy();
  const verify = createEventHook();
  const expired = createEventHook();
  const error = createEventHook();
  const rootRef = toRef(root);
  const state = ref("init" /* Init */);
  whenever(rootRef, async (el) => {
    const id = await proxy.render(el, {
      ...options,
      sitekey: siteKey,
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      callback: verify.trigger,
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      "expired-callback": expired.trigger,
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      "error-callback": error.trigger
    });
    widgetID.value = id;
  });
  verify.on(() => {
    state.value = "verified" /* Verified */;
  });
  expired.on(() => {
    state.value = "expired" /* Expired */;
  });
  error.on(() => {
    state.value = "error" /* Error */;
  });
  return {
    root: rootRef,
    widgetID,
    execute() {
      if (typeof widgetID.value !== "undefined") {
        proxy.execute(widgetID.value);
      }
    },
    reset() {
      state.value = "init" /* Init */;
      if (typeof widgetID.value !== "undefined") {
        proxy.reset(widgetID.value);
      }
    },
    state,
    onVerify: verify.on,
    onExpired: expired.on,
    onError: error.on
  };
}
